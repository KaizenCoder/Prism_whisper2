#!/usr/bin/env python3
"""
SuperWhisper2 System Tray - Phase 2.1
Interface utilisateur moderne avec int√©gration Bridge V4
Features: Ic√¥ne anim√©e, menu contextuel, notifications, contr√¥le service
"""

import os
import sys
import time
import threading
import logging
from pathlib import Path
from typing import Optional
import pystray
from PIL import Image, ImageDraw
import win32gui
import win32con
from plyer import notification

# Import Bridge V4 et Overlays
sys.path.append(str(Path(__file__).parent.parent))
from bridge.prism_bridge_v4 import PrismBridgeV4
from ui.overlays_simple import SimpleOverlayManager


class SuperWhisperSystemTray:
    """System Tray professionnel pour SuperWhisper2"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent.parent
        self.log_file = self.project_root / "logs" / "system_tray.log"
        
        # Assurer que le r√©pertoire logs existe
        self.log_file.parent.mkdir(exist_ok=True)
        
        # Setup logging
        self.logger = self._setup_logging()
        
        # Bridge V4
        self.bridge = None
        self.bridge_thread = None
        self.is_running = False
        self.is_recording = False
        self.is_processing = False
        
        # Overlays Manager
        self.overlay_manager = None
        self.overlays_enabled = True
        
        # System Tray
        self.tray_icon = None
        self.menu = None
        
        # Icons
        self.icon_idle = self._create_icon_idle()
        self.icon_recording = self._create_icon_recording()
        self.icon_processing = self._create_icon_processing()
        self.icon_error = self._create_icon_error()
        
        self.logger.info("üéØ SuperWhisper2 System Tray initialis√©")
    
    def _setup_logging(self):
        """Setup logging pour System Tray"""
        logger = logging.getLogger('SystemTray')
        logger.setLevel(logging.INFO)
        
        if logger.handlers:
            logger.handlers.clear()
        
        # File handler
        file_handler = logging.FileHandler(self.log_file, encoding='utf-8')
        file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        file_handler.setFormatter(file_formatter)
        logger.addHandler(file_handler)
        
        # Console handler
        console_handler = logging.StreamHandler()
        console_formatter = logging.Formatter('%(asctime)s - TRAY - %(message)s')
        console_handler.setFormatter(console_formatter)
        logger.addHandler(console_handler)
        
        return logger
    
    def _create_icon_idle(self) -> Image.Image:
        """Cr√©er ic√¥ne idle (bleu)"""
        image = Image.new('RGBA', (64, 64), (0, 0, 0, 0))
        draw = ImageDraw.Draw(image)
        
        # Microphone idle (bleu)
        draw.ellipse([16, 16, 48, 48], fill=(52, 152, 219, 255), outline=(41, 128, 185, 255), width=2)
        draw.rectangle([28, 24, 36, 40], fill=(255, 255, 255, 255))
        draw.ellipse([30, 42, 34, 46], fill=(255, 255, 255, 255))
        draw.line([32, 46, 32, 52], fill=(255, 255, 255, 255), width=2)
        draw.line([28, 52, 36, 52], fill=(255, 255, 255, 255), width=2)
        
        return image
    
    def _create_icon_recording(self) -> Image.Image:
        """Cr√©er ic√¥ne recording (rouge anim√©)"""
        image = Image.new('RGBA', (64, 64), (0, 0, 0, 0))
        draw = ImageDraw.Draw(image)
        
        # Microphone recording (rouge)
        draw.ellipse([16, 16, 48, 48], fill=(231, 76, 60, 255), outline=(192, 57, 43, 255), width=2)
        draw.rectangle([28, 24, 36, 40], fill=(255, 255, 255, 255))
        draw.ellipse([30, 42, 34, 46], fill=(255, 255, 255, 255))
        draw.line([32, 46, 32, 52], fill=(255, 255, 255, 255), width=2)
        draw.line([28, 52, 36, 52], fill=(255, 255, 255, 255), width=2)
        
        # Indicateur recording
        draw.ellipse([50, 10, 60, 20], fill=(231, 76, 60, 255))
        
        return image
    
    def _create_icon_processing(self) -> Image.Image:
        """Cr√©er ic√¥ne processing (orange)"""
        image = Image.new('RGBA', (64, 64), (0, 0, 0, 0))
        draw = ImageDraw.Draw(image)
        
        # Microphone processing (orange)
        draw.ellipse([16, 16, 48, 48], fill=(243, 156, 18, 255), outline=(230, 126, 34, 255), width=2)
        draw.rectangle([28, 24, 36, 40], fill=(255, 255, 255, 255))
        draw.ellipse([30, 42, 34, 46], fill=(255, 255, 255, 255))
        draw.line([32, 46, 32, 52], fill=(255, 255, 255, 255), width=2)
        draw.line([28, 52, 36, 52], fill=(255, 255, 255, 255), width=2)
        
        # Indicateur processing (gear)
        draw.ellipse([48, 8, 58, 18], fill=(243, 156, 18, 255))
        
        return image
    
    def _create_icon_error(self) -> Image.Image:
        """Cr√©er ic√¥ne error (rouge)"""
        image = Image.new('RGBA', (64, 64), (0, 0, 0, 0))
        draw = ImageDraw.Draw(image)
        
        # Microphone error (rouge fonc√©)
        draw.ellipse([16, 16, 48, 48], fill=(192, 57, 43, 255), outline=(128, 38, 29, 255), width=2)
        draw.rectangle([28, 24, 36, 40], fill=(255, 255, 255, 255))
        draw.ellipse([30, 42, 34, 46], fill=(255, 255, 255, 255))
        draw.line([32, 46, 32, 52], fill=(255, 255, 255, 255), width=2)
        draw.line([28, 52, 36, 52], fill=(255, 255, 255, 255), width=2)
        
        # X error
        draw.line([48, 8, 58, 18], fill=(192, 57, 43, 255), width=3)
        draw.line([58, 8, 48, 18], fill=(192, 57, 43, 255), width=3)
        
        return image
    
    def _create_menu(self):
        """Cr√©er menu contextuel syst√®me tray"""
        menu_items = [
            pystray.MenuItem(
                "üéôÔ∏è SuperWhisper2",
                lambda: None,
                enabled=False
            ),
            pystray.Menu.SEPARATOR,
            pystray.MenuItem(
                "‚ñ∂Ô∏è D√©marrer Service" if not self.is_running else "‚è∏Ô∏è Arr√™ter Service",
                self._toggle_service
            ),
            pystray.MenuItem(
                "üìä Statistiques",
                self._show_stats
            ),
            pystray.Menu.SEPARATOR,
            pystray.MenuItem(
                "üëÅÔ∏è Overlays" if self.overlays_enabled else "üôà Overlays",
                self._toggle_overlays
            ),
            pystray.MenuItem(
                "‚öôÔ∏è Configuration",
                self._open_settings
            ),
            pystray.MenuItem(
                "üìã Test Transcription",
                self._test_transcription
            ),
            pystray.Menu.SEPARATOR,
            pystray.MenuItem(
                "‚ÑπÔ∏è √Ä propos",
                self._show_about
            ),
            pystray.MenuItem(
                "‚ùå Quitter",
                self._quit_application
            )
        ]
        
        return pystray.Menu(*menu_items)
    
    def _toggle_service(self, icon=None, item=None):
        """D√©marrer/Arr√™ter le service SuperWhisper2"""
        if not self.is_running:
            self._start_service()
        else:
            self._stop_service()
    
    def _start_service(self):
        """D√©marrer service Bridge V4"""
        try:
            self.logger.info("üöÄ D√©marrage service SuperWhisper2...")
            
            # Notification
            self._show_notification(
                "SuperWhisper2",
                "D√©marrage du service de transcription...",
                "info"
            )
            
            # D√©marrer Bridge V4 dans thread s√©par√©
            self.bridge = PrismBridgeV4()
            self.bridge_thread = threading.Thread(
                target=self._run_bridge_service,
                daemon=True
            )
            self.bridge_thread.start()
            
            self.is_running = True
            self._update_icon(self.icon_idle)
            self._update_menu()
            
            self.logger.info("‚úÖ Service SuperWhisper2 d√©marr√©")
            
            # Notification succ√®s
            self._show_notification(
                "SuperWhisper2",
                "Service d√©marr√©! Utilisez Win+Alt+V pour transcrire",
                "success"
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur d√©marrage service: {e}")
            self._show_notification(
                "SuperWhisper2 - Erreur",
                f"√âchec d√©marrage: {str(e)[:50]}...",
                "error"
            )
            self._update_icon(self.icon_error)
    
    def _stop_service(self):
        """Arr√™ter service Bridge V4"""
        try:
            self.logger.info("‚è∏Ô∏è Arr√™t service SuperWhisper2...")
            
            self.is_running = False
            
            if self.bridge:
                self.bridge.stop_bridge()
                self.bridge = None
            
            self._update_icon(self.icon_idle)
            self._update_menu()
            
            self.logger.info("‚úÖ Service SuperWhisper2 arr√™t√©")
            
            # Notification
            self._show_notification(
                "SuperWhisper2",
                "Service arr√™t√©",
                "info"
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur arr√™t service: {e}")
    
    def _run_bridge_service(self):
        """Ex√©cuter Bridge V4 dans thread s√©par√©"""
        try:
            self.bridge.start_bridge()
        except Exception as e:
            self.logger.error(f"‚ùå Erreur Bridge V4: {e}")
            self.is_running = False
            self._update_icon(self.icon_error)
    
    def _show_stats(self, icon=None, item=None):
        """Afficher statistiques service"""
        try:
            if self.bridge:
                stats = self.bridge.get_bridge_stats()
                
                stats_text = f"""üìä Statistiques SuperWhisper2
                
Transcriptions: {stats.get('total_transcriptions', 0)}
Temps moyen: {stats.get('average_time', 0):.2f}s
GPU optimisations: {stats.get('gpu_optimizations', 0)}
Service actif: {'‚úÖ Oui' if self.is_running else '‚ùå Non'}"""
                
                self._show_notification(
                    "SuperWhisper2 - Statistiques",
                    stats_text.replace('\n', ' | '),
                    "info"
                )
            else:
                self._show_notification(
                    "SuperWhisper2 - Statistiques",
                    "Service non d√©marr√©",
                    "info"
                )
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur stats: {e}")
    
    def _test_transcription(self, icon=None, item=None):
        """Test transcription manuelle"""
        try:
            if not self.is_running:
                self._show_notification(
                    "SuperWhisper2 - Test",
                    "D√©marrez d'abord le service",
                    "warning"
                )
                return
            
            # Test avec overlays si disponibles
            if self.overlay_manager and self.overlays_enabled:
                self._test_with_overlays()
            else:
                # Test classique
                trigger_file = self.project_root / "talon_trigger.txt"
                trigger_file.write_text("transcribe")
            
            self._show_notification(
                "SuperWhisper2 - Test",
                "Test de transcription lanc√©...",
                "info"
            )
            
            self.logger.info("üß™ Test transcription manuel lanc√©")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur test: {e}")
    
    def _test_with_overlays(self):
        """Test transcription avec d√©monstration overlays"""
        try:
            # D√©marrer recording
            self.overlay_manager.start_recording()
            self._update_icon(self.icon_recording)
            
            # Transcription progressive (simul√©e pour d√©mo)
            texts = [
                "Test overlays",
                "Test overlays en cours",
                "Test overlays en cours de transcription",
                "Test overlays en cours de transcription temps r√©el"
            ]
            
            for i, text in enumerate(texts):
                threading.Timer(
                    1.0 + i * 0.8,
                    lambda t=text: self.overlay_manager.update_transcription(t, False)
                ).start()
            
            # Finaliser transcription et lancer vraie transcription
            def finalize():
                self.overlay_manager.transcription_complete(
                    "Test overlays: d√©monstration termin√©e",
                    3.2
                )
                self._update_icon(self.icon_idle)
                
                # Maintenant lancer vraie transcription
                trigger_file = self.project_root / "talon_trigger.txt"
                trigger_file.write_text("transcribe")
            
            threading.Timer(4.5, finalize).start()
            
            self.logger.info("üé¨ Test overlays + transcription lanc√©")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur test overlays: {e}")
    
    def _toggle_overlays(self, icon=None, item=None):
        """Toggle affichage overlays"""
        try:
            if not self.overlay_manager:
                # Initialiser overlays au premier usage
                self.overlay_manager = SimpleOverlayManager()
                self.logger.info("‚ú® Overlay Manager initialis√©")
            
            self.overlays_enabled = not self.overlays_enabled
            
            if self.overlays_enabled:
                self.overlay_manager.show_all()
                self._show_notification(
                    "SuperWhisper2 - Overlays",
                    "Overlays activ√©s",
                    "success"
                )
                self.logger.info("üëÅÔ∏è Overlays activ√©s")
            else:
                self.overlay_manager.hide_all()
                self._show_notification(
                    "SuperWhisper2 - Overlays",
                    "Overlays masqu√©s",
                    "info"
                )
                self.logger.info("üôà Overlays masqu√©s")
            
            # Mettre √† jour menu
            self._update_menu()
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur toggle overlays: {e}")
            self._show_notification(
                "SuperWhisper2 - Erreur",
                f"Erreur overlays: {str(e)[:50]}...",
                "error"
            )
    
    def _open_settings(self, icon=None, item=None):
        """Ouvrir configuration (Phase 2.3)"""
        self._show_notification(
            "SuperWhisper2 - Configuration",
            "Interface de configuration en d√©veloppement (Phase 2.3)",
            "info"
        )
    
    def _show_about(self, icon=None, item=None):
        """Afficher informations application"""
        about_text = """SuperWhisper2 v2.0
Transcription vocale ultra-rapide
Phase 2: Interface & UX moderne
GPU RTX 3090 optimis√©"""
        
        self._show_notification(
            "SuperWhisper2 - √Ä propos",
            about_text.replace('\n', ' | '),
            "info"
        )
    
    def _quit_application(self, icon=None, item=None):
        """Quitter application"""
        self.logger.info("üëã Fermeture SuperWhisper2...")
        
        # Arr√™ter service
        if self.is_running:
            self._stop_service()
        
        # Notification
        self._show_notification(
            "SuperWhisper2",
            "Application ferm√©e",
            "info"
        )
        
        # Quitter tray
        if self.tray_icon:
            self.tray_icon.stop()
    
    def _update_icon(self, new_icon: Image.Image):
        """Mettre √† jour ic√¥ne syst√®me tray"""
        if self.tray_icon:
            self.tray_icon.icon = new_icon
    
    def _update_menu(self):
        """Mettre √† jour menu contextuel"""
        if self.tray_icon:
            self.tray_icon.menu = self._create_menu()
    
    def _show_notification(self, title: str, message: str, notification_type: str = "info"):
        """Afficher notification Windows"""
        try:
            # Ic√¥ne selon type
            icon_path = None
            if notification_type == "success":
                timeout = 3
            elif notification_type == "error":
                timeout = 5
            elif notification_type == "warning":
                timeout = 4
            else:
                timeout = 3
            
            notification.notify(
                title=title,
                message=message,
                timeout=timeout,
                toast=True
            )
            
            self.logger.info(f"üì¢ Notification: {title} - {message}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur notification: {e}")
    
    def start_tray(self):
        """D√©marrer syst√®me tray"""
        try:
            self.logger.info("üéØ D√©marrage System Tray SuperWhisper2...")
            
            # Cr√©er menu
            self.menu = self._create_menu()
            
            # Cr√©er ic√¥ne tray
            self.tray_icon = pystray.Icon(
                "SuperWhisper2",
                self.icon_idle,
                "SuperWhisper2 - Transcription vocale",
                self.menu
            )
            
            # Notification de d√©marrage
            self._show_notification(
                "SuperWhisper2",
                "Interface syst√®me d√©marr√©e. Clic droit pour le menu.",
                "success"
            )
            
            # D√©marrer automatiquement le service
            threading.Timer(2.0, self._start_service).start()
            
            # Lancer tray (bloquant)
            self.tray_icon.run()
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur syst√®me tray: {e}")
            raise


def main():
    """Point d'entr√©e principal"""
    try:
        print("üéôÔ∏è SuperWhisper2 System Tray - Phase 2.1")
        print("Interface utilisateur moderne avec Bridge V4")
        print("-" * 50)
        
        # Cr√©er et lancer syst√®me tray
        tray = SuperWhisperSystemTray()
        tray.start_tray()
        
    except KeyboardInterrupt:
        print("\nüëã Application ferm√©e par utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")
        input("Appuyez sur Entr√©e pour fermer...")


if __name__ == "__main__":
    main() 