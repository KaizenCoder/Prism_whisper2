#!/usr/bin/env python3
"""
E3 - STREAMING PIPELINE DEBUG 
Diagnostic approfondi pour r√©soudre l'interruption du streaming Engine V5

PROBL√àME IDENTIFI√â:
- E1+E2 corrig√©s avec succ√®s (device routing + callback guard)
- Engine V5 fait 1 callback puis streaming s'arr√™te
- AudioStreamer continue mais Engine V5 ne traite plus

OBJECTIF: Identifier le point de rupture dans la cha√Æne
AudioStreamer ‚Üí StreamingManager ‚Üí Engine V5 ‚Üí Transcription ‚Üí Callback
"""

import os
import sys
import time
import threading
import queue
import logging
from datetime import datetime
import numpy as np

# Configuration RTX 3090
os.environ['CUDA_VISIBLE_DEVICES'] = '1'
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'

# Ajouter src au path
current_dir = os.path.dirname(os.path.abspath(__file__))
src_dir = os.path.join(current_dir, 'src')
sys.path.insert(0, src_dir)


class StreamingPipelineDebugger:
    """
    Debugger sp√©cialis√© pour analyser le pipeline streaming Engine V5
    """
    
    def __init__(self):
        self.debug_logs = []
        self.callback_count = 0
        self.audio_chunks_received = 0
        self.engine_callbacks_count = 0
        self.streamer_active = False
        self.engine_active = False
        
        # Setup logging
        self.logger = logging.getLogger('StreamingDebugger')
        self.logger.setLevel(logging.DEBUG)
        
        # File handler pour logs d√©taill√©s
        log_file = f"streaming_debug_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        file_handler = logging.FileHandler(log_file)
        file_handler.setLevel(logging.DEBUG)
        
        # Console handler pour l'interface
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        
        # Formatters
        detailed_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
        )
        simple_formatter = logging.Formatter('%(levelname)s: %(message)s')
        
        file_handler.setFormatter(detailed_formatter)
        console_handler.setFormatter(simple_formatter)
        
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)
        
        print(f"üìã Logs d√©taill√©s sauv√©s dans: {log_file}")
    
    def log_event(self, event_type: str, message: str, data: dict = None):
        """Log un √©v√©nement avec timestamp et contexte"""
        timestamp = time.time()
        log_entry = {
            'timestamp': timestamp,
            'event_type': event_type,
            'message': message,
            'data': data or {}
        }
        self.debug_logs.append(log_entry)
        self.logger.info(f"[{event_type}] {message}")
        if data:
            self.logger.debug(f"    Data: {data}")
    
    def debug_audio_streamer_flow(self):
        """
        TEST 1: V√©rifier que AudioStreamer capture et transmet bien l'audio
        """
        print("\nüî¨ TEST 1 - AUDIO STREAMER FLOW")
        print("=" * 60)
        
        try:
            from audio.audio_streamer import AudioStreamer
            from utils.callback_guard import signature_guard
            
            chunks_received = []
            
            @signature_guard
            def debug_audio_callback(audio_data):
                self.audio_chunks_received += 1
                rms = np.sqrt(np.mean(audio_data ** 2)) if len(audio_data) > 0 else 0
                chunks_received.append({
                    'chunk_id': self.audio_chunks_received,
                    'timestamp': time.time(),
                    'rms': rms,
                    'samples': len(audio_data)
                })
                
                self.log_event(
                    "AUDIO_CHUNK", 
                    f"Chunk {self.audio_chunks_received}: RMS={rms:.6f}, samples={len(audio_data)}",
                    {'chunk_id': self.audio_chunks_received, 'rms': rms}
                )
                
                # Simuler que ce chunk va vers Engine V5
                if self.audio_chunks_received <= 3:
                    print(f"  üìä Chunk {self.audio_chunks_received}: RMS={rms:.6f}, {len(audio_data)} samples")
            
            self.log_event("TEST_START", "Starting AudioStreamer flow test")
            
            # Cr√©er AudioStreamer avec nos correctifs E1+E2
            streamer = AudioStreamer(
                callback=debug_audio_callback,
                logger=self.logger,
                sample_rate=16000,
                chunk_duration=1.0,  # 1s chunks pour debug
                device_name="Rode NT-USB"
            )
            
            self.log_event("STREAMER_INIT", f"AudioStreamer created with device_id: {streamer.device_id}")
            print(f"  ‚úÖ AudioStreamer initialis√© sur device: {streamer.device_id}")
            
            # Test capture 10 secondes
            print(f"  üé§ Test capture 10 secondes...")
            self.streamer_active = True
            streamer.start()
            
            start_time = time.time()
            while time.time() - start_time < 10:
                time.sleep(1)
                print(f"    {int(time.time() - start_time)}s - Chunks re√ßus: {self.audio_chunks_received}")
            
            streamer.stop()
            self.streamer_active = False
            
            # Analyse des r√©sultats
            total_chunks = len(chunks_received)
            avg_rms = np.mean([c['rms'] for c in chunks_received]) if chunks_received else 0
            
            self.log_event(
                "TEST_RESULT", 
                f"AudioStreamer test completed: {total_chunks} chunks, avg_rms={avg_rms:.6f}",
                {'total_chunks': total_chunks, 'avg_rms': avg_rms}
            )
            
            print(f"  üìä R√©sultats: {total_chunks} chunks, RMS moyen: {avg_rms:.6f}")
            
            # Crit√®re de succ√®s: Au moins 8 chunks en 10s (1 chunk/s)
            success = total_chunks >= 8
            print(f"  üéØ TEST 1: {'‚úÖ SUCC√àS' if success else '‚ùå √âCHEC'}")
            return success, chunks_received
            
        except Exception as e:
            self.log_event("ERROR", f"AudioStreamer test failed: {e}")
            print(f"  ‚ùå ERREUR: {e}")
            return False, []
    
    def debug_engine_v5_integration(self):
        """
        TEST 2: V√©rifier l'int√©gration AudioStreamer ‚Üí Engine V5
        """
        print("\nüî¨ TEST 2 - ENGINE V5 INTEGRATION")
        print("=" * 60)
        
        try:
            from core.whisper_engine_v5 import SuperWhisper2EngineV5
            from utils.callback_guard import signature_guard
            
            transcriptions_received = []
            
            @signature_guard
            def debug_transcription_callback(text: str):
                self.engine_callbacks_count += 1
                timestamp = time.time()
                transcriptions_received.append({
                    'callback_id': self.engine_callbacks_count,
                    'timestamp': timestamp,
                    'text': text[:50] + "..." if len(text) > 50 else text
                })
                
                self.log_event(
                    "ENGINE_CALLBACK", 
                    f"Callback {self.engine_callbacks_count}: '{text[:30]}...'",
                    {'callback_id': self.engine_callbacks_count, 'text_length': len(text)}
                )
                
                print(f"  üìù Callback {self.engine_callbacks_count}: '{text[:50]}...'")
            
            self.log_event("ENGINE_TEST_START", "Starting Engine V5 integration test")
            
            # Initialiser Engine V5
            print(f"  üöÄ Initialisation Engine V5...")
            engine = SuperWhisper2EngineV5()
            engine.start_engine()
            
            # Configurer callback prot√©g√© par E2
            engine.transcription_callback = debug_transcription_callback
            
            self.log_event("ENGINE_INIT", "Engine V5 initialized and callback configured")
            print(f"  ‚úÖ Engine V5 initialis√©")
            
            # D√©marrer streaming avec monitoring du pipeline
            print(f"  üåä D√©marrage streaming pipeline...")
            self.engine_active = True
            
            # Acc√©der au StreamingManager
            streaming_manager = engine.streaming_manager
            
            self.log_event("STREAMING_START", "Starting streaming manager")
            
            # D√©marrer le streaming
            streaming_manager.start()
            
            # Monitorer pendant 15 secondes avec diagnostic continu
            start_time = time.time()
            monitoring_interval = 2  # Toutes les 2 secondes
            
            while time.time() - start_time < 15:
                elapsed = int(time.time() - start_time)
                
                # Diagnostic p√©riodique du pipeline
                audio_streamer = streaming_manager.audio_streamer
                
                pipeline_status = {
                    'elapsed': elapsed,
                    'streaming_manager_running': getattr(streaming_manager, 'running', 'unknown'),
                    'audio_streamer_running': getattr(audio_streamer, 'running', 'unknown'),
                    'stream_counter': getattr(streaming_manager, 'stream_counter', 'unknown'),
                    'callbacks_count': self.engine_callbacks_count
                }
                
                self.log_event(
                    "PIPELINE_STATUS", 
                    f"t={elapsed}s: callbacks={self.engine_callbacks_count}, streaming={pipeline_status['streaming_manager_running']}",
                    pipeline_status
                )
                
                print(f"    {elapsed}s - Callbacks re√ßus: {self.engine_callbacks_count}")
                
                # Alerte si pas de callbacks apr√®s 5s
                if elapsed >= 5 and self.engine_callbacks_count == 0:
                    self.log_event("WARNING", "No callbacks received after 5 seconds")
                    print(f"    ‚ö†Ô∏è Aucun callback apr√®s 5s - Pipeline probablement cass√©")
                
                # Alerte si callbacks s'arr√™tent
                if elapsed >= 10 and self.engine_callbacks_count == 1:
                    self.log_event("WARNING", "Streaming stopped after 1 callback")
                    print(f"    ‚ö†Ô∏è Streaming arr√™t√© apr√®s 1 callback - Probl√®me confirm√©")
                
                time.sleep(monitoring_interval)
            
            # Arr√™ter streaming
            streaming_manager.stop()
            self.engine_active = False
            
            # Analyse des r√©sultats
            total_callbacks = len(transcriptions_received)
            
            self.log_event(
                "ENGINE_TEST_RESULT", 
                f"Engine V5 test completed: {total_callbacks} callbacks",
                {'total_callbacks': total_callbacks, 'transcriptions': transcriptions_received}
            )
            
            print(f"  üìä R√©sultats: {total_callbacks} callbacks Engine V5")
            
            # Analyse pattern des callbacks
            if total_callbacks >= 2:
                time_between_callbacks = [
                    transcriptions_received[i]['timestamp'] - transcriptions_received[i-1]['timestamp']
                    for i in range(1, len(transcriptions_received))
                ]
                avg_interval = np.mean(time_between_callbacks)
                print(f"  ‚è±Ô∏è Intervalle moyen entre callbacks: {avg_interval:.1f}s")
            
            # Crit√®re de succ√®s: Au moins 5 callbacks en 15s
            success = total_callbacks >= 5
            print(f"  üéØ TEST 2: {'‚úÖ SUCC√àS' if success else '‚ùå √âCHEC'}")
            
            return success, transcriptions_received
            
        except Exception as e:
            self.log_event("ERROR", f"Engine V5 test failed: {e}")
            print(f"  ‚ùå ERREUR: {e}")
            return False, []
    
    def analyze_pipeline_bottleneck(self):
        """
        TEST 3: Analyser les logs pour identifier le bottleneck exact
        """
        print("\nüî¨ TEST 3 - PIPELINE BOTTLENECK ANALYSIS")
        print("=" * 60)
        
        # Analyser les √©v√©nements par type
        events_by_type = {}
        for log in self.debug_logs:
            event_type = log['event_type']
            if event_type not in events_by_type:
                events_by_type[event_type] = []
            events_by_type[event_type].append(log)
        
        print(f"  üìä √âv√©nements captur√©s:")
        for event_type, events in events_by_type.items():
            print(f"    {event_type}: {len(events)} √©v√©nements")
        
        # Analyser le timing
        if 'AUDIO_CHUNK' in events_by_type and 'ENGINE_CALLBACK' in events_by_type:
            audio_chunks = len(events_by_type['AUDIO_CHUNK'])
            engine_callbacks = len(events_by_type['ENGINE_CALLBACK'])
            
            print(f"\n  üìà Analyse du ratio:")
            print(f"    Audio chunks captur√©s: {audio_chunks}")
            print(f"    Engine callbacks: {engine_callbacks}")
            print(f"    Ratio: {engine_callbacks/audio_chunks*100:.1f}% callbacks/chunks")
            
            if engine_callbacks == 0:
                print(f"    üîç PROBL√àME: Aucun callback Engine V5 - Audio n'atteint pas Engine")
            elif engine_callbacks == 1:
                print(f"    üîç PROBL√àME: 1 seul callback - Streaming s'interrompt apr√®s premi√®re transcription")
            elif engine_callbacks < audio_chunks * 0.5:
                print(f"    üîç PROBL√àME: Ratio faible - Perte de chunks entre AudioStreamer et Engine")
        
        # Identifier les gaps temporels
        all_events = sorted(self.debug_logs, key=lambda x: x['timestamp'])
        
        if len(all_events) >= 2:
            print(f"\n  ‚è±Ô∏è Analyse temporelle:")
            for i in range(1, min(10, len(all_events))):  # Premi√®re 10 √©v√©nements
                prev_event = all_events[i-1]
                curr_event = all_events[i]
                gap = curr_event['timestamp'] - prev_event['timestamp']
                
                if gap > 2.0:  # Gap > 2s suspect
                    print(f"    ‚ö†Ô∏è Gap {gap:.1f}s entre {prev_event['event_type']} et {curr_event['event_type']}")
        
        return events_by_type
    
    def run_full_diagnostic(self):
        """Lance le diagnostic complet E3"""
        print("üî• D√âMARRAGE DIAGNOSTIC E3 - STREAMING PIPELINE DEBUG")
        print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("üéØ Objectif: Identifier pourquoi Engine V5 streaming s'interrompt apr√®s 1 callback")
        print("=" * 80)
        
        self.log_event("DIAGNOSTIC_START", "Full streaming pipeline diagnostic started")
        
        # Test 1: AudioStreamer flow
        test1_success, audio_chunks = self.debug_audio_streamer_flow()
        
        # Test 2: Engine V5 integration  
        test2_success, transcriptions = self.debug_engine_v5_integration()
        
        # Test 3: Bottleneck analysis
        events_analysis = self.analyze_pipeline_bottleneck()
        
        # R√©sum√© final
        print("\n" + "=" * 80)
        print("üìä R√âSUM√â DIAGNOSTIC E3")
        print("=" * 80)
        
        print(f"  Test 1 - AudioStreamer Flow: {'‚úÖ SUCC√àS' if test1_success else '‚ùå √âCHEC'}")
        print(f"  Test 2 - Engine V5 Integration: {'‚úÖ SUCC√àS' if test2_success else '‚ùå √âCHEC'}")
        print(f"  Audio chunks captur√©s: {len(audio_chunks)}")
        print(f"  Engine callbacks re√ßus: {len(transcriptions)}")
        
        # Diagnostic final
        if test1_success and not test2_success:
            conclusion = "üîç PROBL√àME IDENTIFI√â: AudioStreamer fonctionne, mais Engine V5 ne traite pas les chunks"
            recommendation = "‚û°Ô∏è SOLUTION: V√©rifier le pipeline StreamingManager ‚Üí Engine V5"
        elif not test1_success:
            conclusion = "üîç PROBL√àME IDENTIFI√â: AudioStreamer ne capture pas l'audio correctement"
            recommendation = "‚û°Ô∏è SOLUTION: Revoir la configuration device E1"
        elif test1_success and test2_success:
            conclusion = "‚úÖ PIPELINE FONCTIONNEL: Tests passent, probl√®me peut √™tre intermittent"
            recommendation = "‚û°Ô∏è SOLUTION: Tests plus longs ou conditions sp√©cifiques"
        else:
            conclusion = "üîç PROBL√àME COMPLEXE: Multiple points de d√©faillance"
            recommendation = "‚û°Ô∏è SOLUTION: Analyse approfondie des logs"
        
        print(f"\n{conclusion}")
        print(f"{recommendation}")
        
        # Sauver r√©sultats
        result_file = f"diagnostic_e3_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(result_file, 'w', encoding='utf-8') as f:
            f.write(f"DIAGNOSTIC E3 - STREAMING PIPELINE DEBUG\n")
            f.write(f"Date: {datetime.now()}\n\n")
            f.write(f"R√âSULTATS:\n")
            f.write(f"- Test AudioStreamer: {'SUCC√àS' if test1_success else '√âCHEC'}\n")
            f.write(f"- Test Engine V5: {'SUCC√àS' if test2_success else '√âCHEC'}\n")
            f.write(f"- Audio chunks: {len(audio_chunks)}\n")
            f.write(f"- Engine callbacks: {len(transcriptions)}\n\n")
            f.write(f"CONCLUSION: {conclusion}\n")
            f.write(f"RECOMMANDATION: {recommendation}\n")
        
        print(f"\nüíæ R√©sultats sauv√©s: {result_file}")
        
        self.log_event("DIAGNOSTIC_END", f"Diagnostic completed - conclusion: {conclusion}")
        
        return test1_success and test2_success


def main():
    """Point d'entr√©e principal du diagnostic E3"""
    debugger = StreamingPipelineDebugger()
    
    try:
        success = debugger.run_full_diagnostic()
        return success
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Diagnostic interrompu par l'utilisateur")
        return False
    except Exception as e:
        print(f"\n‚ùå Erreur critique: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 