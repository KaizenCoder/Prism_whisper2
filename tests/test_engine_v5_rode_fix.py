#!/usr/bin/env python3
"""
Test Engine V5 SuperWhisper2 - FIX MICROPHONE RODE
Version avec patch AudioStreamer pour forcer l'utilisation du device Rode
RTX 3090 + Engine V5 + Rode NT-USB (Device forc√©)
"""

import os
import sys
import time
import threading
import tkinter as tk
from tkinter import scrolledtext, messagebox
from datetime import datetime
import re
import difflib
from collections import Counter
import sounddevice as sd
import numpy as np

# Configuration RTX 3090
os.environ['CUDA_VISIBLE_DEVICES'] = '1'  # RTX 3090 24GB
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'

# Ajouter src au path
current_dir = os.path.dirname(os.path.abspath(__file__))
src_dir = os.path.join(current_dir, 'src')
sys.path.insert(0, src_dir)

# Texte de validation de r√©f√©rence
TEXTE_REFERENCE = """Bonjour, ceci est un test de validation pour SuperWhisper2. Je vais maintenant √©noncer plusieurs phrases de complexit√© croissante pour √©valuer la pr√©cision de transcription.
Premi√®rement, des mots simples : chat, chien, maison, voiture, ordinateur, t√©l√©phone.
Deuxi√®mement, des phrases courtes : Il fait beau aujourd'hui. Le caf√© est d√©licieux. J'aime la musique classique.
Troisi√®mement, des phrases plus complexes : L'intelligence artificielle transforme notre mani√®re de travailler et de communiquer dans le monde moderne.
Quatri√®mement, des termes techniques : algorithme, machine learning, GPU RTX 3090, faster-whisper, quantification INT8, latence de transcription.
Cinqui√®mement, des nombres et dates : vingt-trois, quarante-sept, mille neuf cent quatre-vingt-quinze, le quinze janvier deux mille vingt-quatre.
Sixi√®mement, des mots difficiles : chrysanth√®me, anticonstitutionnellement, prestidigitateur, kak√©mono, yaourt.
Septi√®mement, une phrase longue et complexe : L'optimisation des performances de transcription vocale n√©cessite une approche m√©thodique combinant la s√©lection appropri√©e des mod√®les, l'ajustement des param√®tres de traitement, et l'impl√©mentation d'algorithmes de post-traitement pour am√©liorer la qualit√© du r√©sultat final.
Fin du test de validation."""

class RodeEngineV5Test:
    def __init__(self):
        self.engine = None
        self.listening = False
        self.transcription_complete = ""
        self.transcription_segments = []
        self.start_time = None
        self.rode_device_id = None
        self.patched = False
        
        # Interface
        self.root = tk.Tk()
        self.root.title("üé§ Test Engine V5 - FIX RODE")
        self.root.geometry("1400x800")
        self.root.configure(bg="#0a0e27")
        
        self.setup_ui()
        
    def setup_ui(self):
        """Interface utilisateur"""
        # Header
        header = tk.Frame(self.root, bg="#0a0e27")
        header.pack(fill="x", pady=20)
        
        title = tk.Label(header, 
                        text="üé§ TEST ENGINE V5 - FIX MICROPHONE RODE",
                        font=("Arial", 18, "bold"),
                        bg="#0a0e27", fg="#00d4aa")
        title.pack()
        
        subtitle = tk.Label(header,
                           text="SuperWhisper2 Phase 3 ‚Ä¢ Patch AudioStreamer ‚Ä¢ Rode NT-USB Device Force",
                           font=("Arial", 11),
                           bg="#0a0e27", fg="#6366f1")
        subtitle.pack(pady=5)
        
        # Buttons
        btn_frame = tk.Frame(self.root, bg="#0a0e27")
        btn_frame.pack(pady=20)
        
        self.init_btn = tk.Button(btn_frame,
                                 text="üîß INIT + PATCH RODE",
                                 command=self.init_with_rode_patch,
                                 bg="#059669", fg="white",
                                 font=("Arial", 11, "bold"),
                                 width=22, height=2)
        self.init_btn.pack(side="left", padx=8)
        
        self.start_btn = tk.Button(btn_frame,
                                  text="üéôÔ∏è DEMARRER TEST",
                                  command=self.start_test,
                                  bg="#3b82f6", fg="white",
                                  font=("Arial", 11, "bold"),
                                  width=22, height=2,
                                  state="disabled")
        self.start_btn.pack(side="left", padx=8)
        
        self.stop_btn = tk.Button(btn_frame,
                                 text="‚èπÔ∏è ARRETER TEST", 
                                 command=self.stop_test,
                                 bg="#dc2626", fg="white",
                                 font=("Arial", 11, "bold"),
                                 width=22, height=2,
                                 state="disabled")
        self.stop_btn.pack(side="left", padx=8)
        
        self.analyze_btn = tk.Button(btn_frame,
                                    text="üìä ANALYSER",
                                    command=self.analyze_results,
                                    bg="#ea580c", fg="white",
                                    font=("Arial", 11, "bold"),
                                    width=22, height=2,
                                    state="disabled")
        self.analyze_btn.pack(side="left", padx=8)
        
        # Status
        self.status_label = tk.Label(self.root,
                                    text="üî¥ Status: Pr√™t pour patch Rode",
                                    font=("Arial", 13, "bold"),
                                    bg="#0a0e27", fg="#f87171")
        self.status_label.pack(pady=12)
        
        # Output area
        output_frame = tk.Frame(self.root, bg="#0a0e27")
        output_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Transcription
        trans_frame = tk.LabelFrame(output_frame,
                                   text="üéØ TRANSCRIPTION + DEBUG",
                                   font=("Arial", 11, "bold"),
                                   bg="#0a0e27", fg="#00d4aa")
        trans_frame.pack(fill="both", expand=True, pady=5)
        
        self.transcription_text = scrolledtext.ScrolledText(trans_frame,
                                                          font=("Consolas", 10),
                                                          bg="#1e1b4b", fg="#e2e8f0",
                                                          wrap=tk.WORD,
                                                          height=18)
        self.transcription_text.pack(fill="both", expand=True, padx=8, pady=8)
        
        # Stats
        stats_frame = tk.LabelFrame(output_frame,
                                   text="üìà STATISTIQUES",
                                   font=("Arial", 10, "bold"),
                                   bg="#0a0e27", fg="#00d4aa")
        stats_frame.pack(fill="x", pady=5)
        
        self.stats_text = tk.Text(stats_frame,
                                 font=("Consolas", 9),
                                 bg="#1e1b4b", fg="#e2e8f0",
                                 height=3)
        self.stats_text.pack(fill="x", padx=8, pady=4)
        
        # Instructions
        self.show_initial_text()
        
    def show_initial_text(self):
        """Affiche le texte initial"""
        text = f"""=== FIX MICROPHONE RODE POUR ENGINE V5 ===

üîß INIT + PATCH RODE ‚Üí D√©tecte Rode + Patch AudioStreamer
üéôÔ∏è DEMARRER TEST ‚Üí Test avec device forc√©
üìñ LISEZ LE TEXTE ‚Üí Parlez dans le Rode NT-USB
‚èπÔ∏è ARRETER TEST ‚Üí Termine
üìä ANALYSER ‚Üí Statistiques

=== TEXTE DE VALIDATION ===
{TEXTE_REFERENCE}

========================================================================================
"""
        self.transcription_text.insert(tk.END, text)
        
    def log_message(self, message, color="#e2e8f0"):
        """Log avec timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        full_message = f"[{timestamp}] {message}"
        
        print(full_message)
        
        self.transcription_text.insert(tk.END, full_message + "\n")
        self.transcription_text.see(tk.END)
        self.root.update()
        
    def detect_rode_microphone(self):
        """D√©tecte le microphone Rode"""
        try:
            self.log_message("üîç Scan microphones...")
            
            devices = sd.query_devices()
            self.log_message(f"üìä {len(devices)} devices d√©tect√©s")
            
            # Recherche Rode
            rode_keywords = ['rode', 'nt-usb', 'procaster', 'podmic', 'podcaster']
            
            for i, device in enumerate(devices):
                if device['max_input_channels'] > 0:
                    device_name = device['name'].lower()
                    self.log_message(f"  [{i}] {device['name']} ({device['max_input_channels']} ch)")
                    
                    # Check Rode
                    for keyword in rode_keywords:
                        if keyword in device_name:
                            self.rode_device_id = i
                            self.log_message(f"‚úÖ RODE TROUV√â: {device['name']}")
                            self.log_message(f"üìä Device ID: {i} | SR: {device['default_samplerate']}Hz")
                            return True
            
            self.log_message("‚ùå Aucun Rode d√©tect√©")
            return False
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur d√©tection: {str(e)}")
            return False
    
    def test_rode_audio(self):
        """Test rapide du Rode"""
        if self.rode_device_id is None:
            return False
            
        try:
            self.log_message("üé§ Test Rode (2s)...")
            
            # Test avec device sp√©cifique
            duration = 2.0
            audio_data = sd.rec(int(duration * 16000),
                               samplerate=16000,
                               channels=1,
                               device=self.rode_device_id,
                               dtype=np.float32)
            sd.wait()
            
            rms = np.sqrt(np.mean(audio_data ** 2))
            max_val = np.max(np.abs(audio_data))
            
            self.log_message(f"üìä RMS: {rms:.6f} | Max: {max_val:.6f}")
            
            if rms > 0.0001:
                self.log_message("‚úÖ Rode audio OK!")
                return True
            else:
                self.log_message("‚ö†Ô∏è Niveau faible")
                return True  # Continuer
                
        except Exception as e:
            self.log_message(f"‚ùå Test Rode √©chec: {str(e)}")
            return False
    
    def patch_audio_streamer(self):
        """Patch AudioStreamer pour utiliser le device Rode"""
        try:
            self.log_message("üîß Patch AudioStreamer...")
            
            if self.rode_device_id is None:
                raise Exception("Device Rode non d√©tect√©")
            
            # Import AudioStreamer
            from src.audio.audio_streamer import AudioStreamer
            
            # Sauvegarder m√©thode originale
            original_capture_loop = AudioStreamer._capture_loop
            
            # Device Rode √† utiliser
            rode_device = self.rode_device_id
            
            def patched_capture_loop(self):
                """Boucle de capture patch√©e avec device Rode forc√©"""
                self.logger.info(f"üé§ AudioStreamer patch√© - Device Rode: {rode_device}")
                
                self.stream = sd.InputStream(
                    samplerate=self.sample_rate,
                    channels=self.channels,
                    dtype=np.float32,
                    blocksize=self.chunk_frames,
                    callback=self._audio_callback,
                    device=rode_device  # DEVICE RODE FORC√â !
                )
                with self.stream:
                    while self.running:
                        time.sleep(0.1)
            
            # Appliquer le patch
            AudioStreamer._capture_loop = patched_capture_loop
            
            self.log_message(f"‚úÖ AudioStreamer patch√© pour device {rode_device}")
            self.patched = True
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå Patch AudioStreamer √©chec: {str(e)}")
            return False
    
    def init_with_rode_patch(self):
        """Initialise avec patch Rode"""
        self.log_message("üöÄ INIT ENGINE V5 + PATCH RODE...")
        self.status_label.config(text="üü° Patch en cours...", fg="#fbbf24")
        self.init_btn.config(state="disabled")
        
        def init_thread():
            try:
                # 1. D√©tecter Rode
                if not self.detect_rode_microphone():
                    raise Exception("Rode non d√©tect√©")
                
                # 2. Tester Rode
                if not self.test_rode_audio():
                    raise Exception("Test Rode √©chec")
                
                # 3. Patch AudioStreamer
                if not self.patch_audio_streamer():
                    raise Exception("Patch AudioStreamer √©chec")
                
                # 4. Init Engine V5
                self.log_message("üì¶ Import Engine V5...")
                from src.core.whisper_engine_v5 import SuperWhisper2EngineV5
                
                self.log_message("‚öôÔ∏è Cr√©ation Engine V5...")
                self.engine = SuperWhisper2EngineV5()
                
                # 5. Start Engine V5
                self.log_message("üéÆ Start Engine V5...")
                success = self.engine.start_engine()
                
                if success:
                    self.log_message("‚úÖ ENGINE V5 + RODE PATCH PR√äT!", "#10b981")
                    self.status_label.config(text="üü¢ Engine V5 + Patch Rode OK", fg="#10b981")
                    self.start_btn.config(state="normal")
                else:
                    raise Exception("Engine V5 start √©chec")
                
            except Exception as e:
                error_msg = f"‚ùå ERREUR: {str(e)}"
                self.log_message(error_msg, "#ef4444")
                self.status_label.config(text="üî¥ Erreur init", fg="#ef4444")
                self.init_btn.config(state="normal")
                messagebox.showerror("Erreur", error_msg)
        
        threading.Thread(target=init_thread, daemon=True).start()
    
    def start_test(self):
        """D√©marre test avec Rode patch√©"""
        if not self.engine or not self.patched:
            messagebox.showerror("Erreur", "Engine V5 ou patch non pr√™t!")
            return
            
        self.log_message("="*80)
        self.log_message("üéôÔ∏è D√âBUT TEST AVEC RODE PATCH√â")
        self.log_message("="*80)
        
        # Reset
        self.transcription_complete = ""
        self.transcription_segments = []
        self.start_time = time.time()
        self.listening = True
        
        # Callback transcription
        def on_transcription(text: str):
            if not self.listening:
                return
                
            timestamp = time.time() - self.start_time
            self.transcription_segments.append({
                'text': text,
                'timestamp': timestamp
            })
            
            self.transcription_complete += text + " "
            self.log_message(f"üéØ {text}", "#00d4aa")
            self.update_stats()
        
        try:
            # Config callback
            self.engine.set_transcription_callback(on_transcription)
            
            # UI
            self.start_btn.config(state="disabled")
            self.stop_btn.config(state="normal")
            self.status_label.config(text="üî¥ ENREGISTREMENT RODE ACTIF", fg="#ef4444")
            
            self.log_message("‚úÖ Engine V5 √©coute avec Rode patch√©")
            self.log_message(f"üé§ Device: {self.rode_device_id}")
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur start: {str(e)}")
    
    def stop_test(self):
        """Arr√™te test"""
        if not self.listening:
            return
            
        self.listening = False
        self.log_message("="*80)
        self.log_message("‚èπÔ∏è ARR√äT TEST")
        self.log_message("="*80)
        
        # UI
        self.start_btn.config(state="normal")
        self.stop_btn.config(state="disabled")
        self.analyze_btn.config(state="normal")
        self.status_label.config(text="üü¢ Test termin√©", fg="#10b981")
        
        total_time = time.time() - self.start_time if self.start_time else 0
        nb_segments = len(self.transcription_segments)
        self.log_message(f"üìä Dur√©e: {total_time:.1f}s | Segments: {nb_segments}")
        
        if nb_segments > 0:
            self.log_message("‚úÖ Transcriptions re√ßues - Patch OK!")
        else:
            self.log_message("‚ö†Ô∏è Aucune transcription - Probl√®me possible")
    
    def update_stats(self):
        """Update stats"""
        if not self.transcription_segments:
            return
            
        nb_segments = len(self.transcription_segments)
        total_chars = len(self.transcription_complete)
        elapsed = time.time() - self.start_time if self.start_time else 0
        
        stats = f"Segments: {nb_segments} | Chars: {total_chars} | Temps: {elapsed:.1f}s | Rode: {self.rode_device_id}"
        
        self.stats_text.delete(1.0, tk.END)
        self.stats_text.insert(tk.END, stats)
    
    def analyze_results(self):
        """Analyse rapide"""
        if not self.transcription_complete.strip():
            messagebox.showwarning("Attention", "Aucune transcription!")
            return
            
        self.log_message("="*80)
        self.log_message("üìä ANALYSE RAPIDE")
        self.log_message("="*80)
        
        # Stats basiques
        ref_words = len(TEXTE_REFERENCE.split())
        trans_words = len(self.transcription_complete.split())
        completion = (trans_words / ref_words * 100) if ref_words > 0 else 0
        
        total_time = time.time() - self.start_time if self.start_time else 1
        
        self.log_message(f"üìä Mots r√©f√©rence: {ref_words}")
        self.log_message(f"üìä Mots transcrits: {trans_words}")
        self.log_message(f"üìä Compl√©tion: {completion:.1f}%")
        self.log_message(f"üìä Dur√©e: {total_time:.1f}s")
        self.log_message(f"üìä Segments: {len(self.transcription_segments)}")
        self.log_message(f"üé§ Device Rode utilis√©: {self.rode_device_id}")
        
        # Texte complet
        self.log_message("--- TRANSCRIPTION COMPLETE ---")
        self.log_message(self.transcription_complete)
        
        # Sauvegarde
        self.save_quick_results(completion, total_time)
        
        self.log_message("="*80)
        self.log_message("‚úÖ ANALYSE TERMIN√âE")
        self.log_message("="*80)
    
    def save_quick_results(self, completion, total_time):
        """Sauvegarde rapide"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"test_rode_patch_{timestamp}.txt"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("TEST ENGINE V5 - PATCH MICROPHONE RODE\n")
                f.write("="*60 + "\n")
                f.write(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Device Rode: {self.rode_device_id}\n")
                f.write(f"Patch appliqu√©: {self.patched}\n\n")
                
                f.write("R√âSULTATS\n")
                f.write("-"*30 + "\n")
                f.write(f"Compl√©tion: {completion:.1f}%\n")
                f.write(f"Dur√©e: {total_time:.1f}s\n")
                f.write(f"Segments: {len(self.transcription_segments)}\n\n")
                
                f.write("TRANSCRIPTION\n")
                f.write("-"*30 + "\n")
                f.write(self.transcription_complete + "\n")
                
            self.log_message(f"üíæ Sauvegard√©: {filename}")
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur save: {str(e)}")
    
    def run(self):
        """Lance l'app"""
        self.root.mainloop()

def main():
    """Point d'entr√©e"""
    print("üé§ Test Engine V5 - Patch Microphone Rode...")
    
    try:
        test = RodeEngineV5Test()
        test.run()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Test interrompu")
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 